my_opts <- list(...)
# If html to correct <span> options
if (type == "html") {
if (!is.null(before) & !is.null(after)) {
x <- txt_tag(x, before, after)
} else if (length(my_opts) == 0) {
my_opts$background = "#ffff7f"
}
# replacements to pass to str_replace
opts_to_html = c("^size" = "font-size",
"font$" = "font-family",
"^style" = "font-style",
"background$" = "background-color")
names(my_opts) <- names(my_opts) %>%
str_replace(fixed("_"), "-") %>%
str_replace_all(opts_to_html)
# check for bold, italics, underline
if (bold) { my_opts <- c(my_opts, "bold" = "text-weight") }
if (italics) { my_opts <- c(my_opts, "italics" = "text-style") }
if (underline) { my_opts <- c(my_opts, "underline" = "text-decoration") }
# put all options into <span>
x <- wrap_html(x, my_opts)
}
return(x)
}
#' @export
#' @rdname txt_style
txt_color <- function(x, color = "red"){
txt_style(x, color = color)
}
#' @export
#' @rdname txt_style
txt_colour <- function(x, colour = "red"){
txt_style(x, color = colour)
}
#' @export
#' @rdname txt_style
txt_size <- function(x, size = "large"){
txt_style(x, size = size)
}
#' @export
#' @rdname txt_style
txt_background <- function(x, bg_color = "#ffff7f"){
txt_style(x, background = bg_color)
}
## Want this to auto-lighten background color
#' @export
#' @rdname txt_style
# txt_highlight <- function(x, hlt_color){
#
#   txt_style(x, background = hlt_color)
#
# }
#' @export
#' @rdname txt_style
txt_font <- function(x, font){
txt_style(x, font = font)
}
#' @export
#' @rdname txt_style
txt_bold <- function(x) {
txt_style(x, bold = TRUE)
}
#' @export
#' @rdname txt_style
txt_emph <- function(x) {
txt_style(x, italics = TRUE)
}
#' @export
#' @rdname txt_style
txt_ul <- function(x) {
txt_style(x, underline = TRUE)
}
#' @export
#' @rdname txt_style
txt_tocode <- function(x){
paste0("<code>", x, "</code>")
}
#' @export
txt_tag <- function(x, before, after){
paste0(before, x, after)
}
txt_style("hi", before = before, after = after)
x <- txt_tag(x, before, after)
x
# put all options into <span>
x <- wrap_html(x, my_opts)
x
my_opts
#' Wraps text in html or latex code for formatting
#'
#' \code{txt_style} adds appropriate html style wrappers to a string. Any number of options can be specified, as long as they match html CSS tags names.
#'
#' \code{txt_*} are shortcuts for specific individual style options
#'
#' Warning: These are simple direct wrappers for strings only.  If you are working with \code{demo_code} objects, you should instead use the \code{\link{highlight}} functions.
#'
#' @param x The string to be wrapped
#' @param type The style of display, defaults to "html"  (currently nothing else is supported, sorry)
#' @param bold Should the text be bolded?
#' @param underline Should the text be underlined?
#' @param italics Should the text be italicized?
#' @param ... various display options: any html CSS \code{style} options, or one of \code{font}, \code{size}, \code{color}, \code{background}, \code{style}.
#'
#' @return A string containing \code{x} with html wrappers.
#'
#' @seealso \code{\link{highlight}}
#'
#' @importFrom stringr str_c str_replace
#'
#' @examples
#' # General use
#' txt_style("I am highlighted!")
#' txt_style("I am blue and bold.", color = "blue", bold = TRUE)
#'
#' # Shortcuts
#' txt_color("I am red.")
#' txt_color("I am blue.", color = "blue")
#'
#' # Code styling wrapper
#' txt_tocode("I am code.")
#'
#' @export
txt_style <- function(x, type = "html",
bold = FALSE, underline = FALSE, italics = FALSE,
before = NULL, after = NULL,
...) {
# Dots to list
my_opts <- list(...)
# If html to correct <span> options
if (type == "html") {
if (!is.null(before) & !is.null(after)) {
x <- txt_tag(x, before, after)
} else if (length(my_opts) == 0) {
my_opts$background = "#ffff7f"
}
if (length(my_opts) != 0) {
# replacements to pass to str_replace
opts_to_html = c("^size" = "font-size",
"font$" = "font-family",
"^style" = "font-style",
"background$" = "background-color")
names(my_opts) <- names(my_opts) %>%
str_replace(fixed("_"), "-") %>%
str_replace_all(opts_to_html)
# check for bold, italics, underline
if (bold) { my_opts <- c(my_opts, "bold" = "text-weight") }
if (italics) { my_opts <- c(my_opts, "italics" = "text-style") }
if (underline) { my_opts <- c(my_opts, "underline" = "text-decoration") }
# put all options into <span>
x <- wrap_html(x, my_opts)
} #if options exist
}
return(x)
}
#' @export
#' @rdname txt_style
txt_color <- function(x, color = "red"){
txt_style(x, color = color)
}
#' @export
#' @rdname txt_style
txt_colour <- function(x, colour = "red"){
txt_style(x, color = colour)
}
#' @export
#' @rdname txt_style
txt_size <- function(x, size = "large"){
txt_style(x, size = size)
}
#' @export
#' @rdname txt_style
txt_background <- function(x, bg_color = "#ffff7f"){
txt_style(x, background = bg_color)
}
## Want this to auto-lighten background color
#' @export
#' @rdname txt_style
# txt_highlight <- function(x, hlt_color){
#
#   txt_style(x, background = hlt_color)
#
# }
#' @export
#' @rdname txt_style
txt_font <- function(x, font){
txt_style(x, font = font)
}
#' @export
#' @rdname txt_style
txt_bold <- function(x) {
txt_style(x, bold = TRUE)
}
#' @export
#' @rdname txt_style
txt_emph <- function(x) {
txt_style(x, italics = TRUE)
}
#' @export
#' @rdname txt_style
txt_ul <- function(x) {
txt_style(x, underline = TRUE)
}
#' @export
#' @rdname txt_style
txt_tocode <- function(x){
paste0("<code>", x, "</code>")
}
#' @export
txt_tag <- function(x, before, after){
paste0(before, x, after)
}
txt_style("hi", before = before, after = after)
library(flair)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(flair)
library(knitr)
library(evaluate)
decorate_chunk("plot") %>%
hack(".*")
flair_rx(.string, pattern,
before = '<span class="text-wrapper"><span class="line line1"></span><span class="letters">',
after = '</span></span>',
script = '<script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.2/anime.min.js"></script>',
text = "limegreen",
background = "black")
txt_style(.string, before = before, after = after, background = "black")
library(flair)
decorate_chunk("plot") %>%
hack(".*")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(flair)
library(knitr)
library(evaluate)
decorate_chunk("plot") %>%
hack(".*")
library(flair)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(flair)
library(knitr)
library(evaluate)
decorate_chunk("plot") %>%
hack(".*")
install.packages(c("corrplot", "plotrix"))
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(lme4)) install.packages("lme4") #linear mixed effect models
if (!require(corrplot)) install.packages("corrplot") #visualizing correlations
if (!require(modelr)) install.packages("modelr") #calculate scar healing predictions
if (!require(plotrix)) install.packages("plotrix") #standard error
if (!require(lmerTest)) install.packages("lmerTest") #for generating approx. p-values for GLMM
if (!require(boot)) install.packages("boot") #for logit transformation
if (!require(rlang)) install.packages("rlang") #for list2 function in cross-validation
packages <- c("tidyverse", "lme4","corrplot", "modelr", "plotrix", "lmerTest", "boot", "rlang")
sapply(packages, require, character.only = T)
###Local directory path for Hannah Rempel
#directory <- "/Users/HannahRempel/Google Drive/masters"
### Local directory path for  Kelly Bodwin
directory <- here::here()
# Change working directory to local directory path
usercomp <- paste0(directory, '/parrotfish_net_impacts/data_collection_and_analyses/')
# Reading in raw scar healing data from St. Croix and Bonaire, long format #
filename <- paste0(usercomp,"scar_healing_surveys/processed_data/scar_healing_rate_stx_bon.csv")
scar_df_long <- read.csv(filename, header = T)
x <- "mean(1:10)"
x_split <- split_sandwiches(x, "(\\n|\\<br\\>)+")
library(flair)
x_split <- split_sandwiches(x, "(\\n|\\<br\\>)+")
x_split
x <- "mean(1:10)\nmean(1:10)"
x_split <- split_sandwiches(x, "(\\n|\\<br\\>)+")
x_split
x_split <- stringr::str_split(x, "(\\n|\\<br\\>)+")
x_split
stringr::str_c(x, collapse = "<br>")
bob <- decorate_code("mean(1:10)")
str(bob)
bob
knitted <- bob
# convert knitted string to a list with sources separate from output
knitted <- knitted %>% src_to_list()
where_sources <-  map(knitted, ~attr(.x, "class")) == "source"
library(tidyverse)
where_sources <-  map(knitted, ~attr(.x, "class")) == "source"
knitted[where_sources]
knitted[where_sources]$flaired <- NA
knitted[where_sources]["flaired"] <- NA
knitted[[where_sources]]$flaired <- NA
knitted[[where_sources]]
where_sources
knitted[where_sources]
knitted[where_sources] <- map(knitted[where_sources], ~list(src = .x$src, flaired = .x$src))
knitted
knitted <- bob
map(knitted[where_sources], ~list(src = .x$src, flaired = .x$src))
map_chr(knitted[where_sources], ~list(src = .x[["src"]], flaired = .x[["src"]]))
map_chr(knitted[where_sources], ~c(src = .x[["src"]], flaired = .x[["src"]]))
knitted
str(knitted)
knitted[2]
knitted[2]$src
str(knitted[2])
map(knitted[where_sources], ~c(src = .x[["src"]], flaired = .x[["src"]]))
knitted[where_sources] <- map(knitted[where_sources], ~c(src = .x[["src"]], flaired = .x[["src"]]))
knitted
str(knitted)
knitted[where_sources, "flaired"]
knitted[where_sources, ,"flaired"]
x <- bob
purrr::map(x[where_sources], function(cs) str_remove_all("<[^>]*>"))
purrr::map(x[where_sources], ~str_remove_all(x,"<[^>]*>"))
purrr::map(x[where_sources], ~str_remove_all(.x,"<[^>]*>"))
library(flair)
library(flair)
purrr::map(x[where_sources], ~str_remove_all(.x,"<[^>]*>"))
bob <- "mean(1:10) \n mean(1:10)"
orig_code_text <- bob
x <- decorate_code(bob)
orig_text <-  attr(x, "orig_code_text") %>%
str_split("\n")
orig_text
orig_text <-  attr(x, "orig_code_text") %>%
str_split("\n") %>%
unlist() %>%
str_trim()
purrr::map(x[where_sources], ~str_remove_all(.x,"<[^>]*>"))
orig_text
lines = 2
which(orig_strings %in% orig_text[lines])
orig_strings <- purrr::map(x[where_sources], ~str_remove_all(.x,"<[^>]*>"))
which(orig_strings %in% orig_text[lines])
library(flair)
source_strings <- purrr::map_chr(x[where_sources[to_flair]], function(cs) flair_all(...))
to_flair <- which(orig_strings %in% orig_text[lines])
source_strings <- purrr::map_chr(x[where_sources[to_flair]], function(cs) flair_all())
x
source_strings <- purrr::map_chr(x[where_sources[to_flair]], function(cs) flair_all(cs))
source_strings
where_sources
x[where_sources][to_flair]
purrr::map_chr(x[where_sources][to_flair], function(cs) flair_all(cs, ...))
purrr::map_chr(x[where_sources][to_flair], function(cs) flair_all(cs))
x[where_sources][to_flair] <- source_strings
x[where_sources][to_flair]
source_strings <- purrr::map(x[where_sources][to_flair], function(cs) flair_all(cs, ...))
source_strings <- purrr::map(x[where_sources][to_flair], function(cs) flair_all(cs))
source_strings
source_strings <- purrr::map_chr(x[where_sources][to_flair], function(cs) flair_all(cs))
source_Strings
source_strings
to_flair
where_sources
bob <- "mean(1:10)\n mean(10:20)"
x <- decorate_code(bob)
orig_text <- bob
orig_text <- bob %>%
str_split("\n") %>%
unlist() %>%
str_trim()
orig_text
where_sources <-  map(x, ~attr(.x, "class")) == "source"
orig_strings <- purrr::map(x[where_sources], ~str_remove_all(.x,"<[^>]*>"))
orig_strings
orig_text[lines]
to_flair <- orig_strings %in% orig_text[lines]
purrr::map_chr(x[where_sources][to_flair], function(cs) flair_all(cs))
x[where_sources][to_flair] <- source_strings
x[where_sources][to_flair]
to_flair
where_sources
x[where_sources][to_flair]
x <- decorate_code("bob")
x <- decorate_code(bob)
x[where_sources][to_flair]
purrr::map_chr(x[where_sources][to_flair], function(cs) flair_all(cs))
source_strings <- purrr::map_chr(x[where_sources][to_flair], function(cs) flair_all(cs))
source_strings
x[where_sources][to_flair]
x[where_sources][to_flair] <- source_strings
x[where_sources] <- purrr::map(x[where_sources], function(x) structure(list(src = x), class = "source"))
x
x[where_sources]
x
str(x)
source_strings <- purrr::map(x[where_sources][to_flair], function(cs) flair_all(cs))
x <- decorate_code(bob)
x[where_sources][to_flair] <- source_strings
x
str(x)
x[where_sources][to_flair] <- purrr::map(x[where_sources][to_flair], function(x) structure(list(src = x), class = "source"))
str(x)
x
library(flair)
library(flair)
bob <- 'mean(1:10)
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width))'
x <- decorate_code(bob)
x
str(x)
orig_text <- bob %>% str_split("\n") %>% unlist()
orig_text
where_sources <-  map(x, ~attr(.x, "class")) == "source"
orig_strings <- purrr::map(x[where_sources], ~str_remove_all(.x,"<[^>]*>"))
orig_strings
x[where_sources]
x[where_sources] %>% str_split("\n")
map(x[where_sources], ~str_split(.x, "\\n|<br>"))
map(x[where_sources], ~str_count(.x, "\\n|<br>"))
cumsum(map(x[where_sources], ~str_count(.x, "\\n|<br>")))
map(x[where_sources], ~str_count(.x, "[^\\n|<br>]*"))
map(x[where_sources], ~str_count(.x, "[^\\n(<br>)]*"))
?str_count
str_extract(.x, "\\n|(<br>)", negate = TRUE))
map(x[where_sources], ~str_extract(.x, "\\n|(<br>)", negate = TRUE))
map(x[where_sources], ~str_extract(.x, "[^(<br>)]*"))
map(x[where_sources], ~str_count(.x, "\\n|(<br>)"))
map(x[where_sources], ~str_count(.x, "\\n|(<br>)")+1)
# number lines
map2(1:sum(where_sources), x[where_sources], ~1:(str_count(.y, "\\n|(<br>)")+1 + .x))
# number lines
map2(1:sum(where_sources), x[where_sources], ~0:(str_count(.y, "\\n|(<br>)")+1 + .x))
# number lines
map2(1:sum(where_sources), x[where_sources], ~0:(str_count(.y, "\\n|(<br>)") + .x))
1:sum(where_sources)
0:0
# number lines
map2(1:sum(where_sources), x[where_sources], ~(0:str_count(.y, "\\n|(<br>)")) + .x))
# number lines
x[where_sources] %>%
map(~str_count(.x, "\\n|(<br>)")) %>%
map2(1:sum(where_sources), ~ 0:.x + .y)
flair_sublines <- function(text, which_lines, ...) {
text <- text %>% str_split("\\n|(<br>)")
text[which_lines] <- text[which_lines] %>% flair_all(...)
text <- str_c(text, collapse = "<br>")
return(text)
}
source_strings <- purrr::map(x[where_sources],
function(cs)
flair_sublines(cs, which(line_nums %in% lines)))
line_nums <-
x[where_sources] %>%
map(~str_count(.x, "\\n|(<br>)")) %>%
map2(1:sum(where_sources), ~ 0:.x + .y)
source_strings <- purrr::map(x[where_sources],
function(cs)
flair_sublines(cs, which(line_nums %in% lines)))
purrr::map(x[where_sources],
function(cs)
flair_sublines(cs, which(line_nums %in% lines)))
which(line_nums %in% lines)
source_strings <- purrr::map2(x[where_sources],
line_nums,
~flair_sublines(.x, which(.y %in% lines)))
x[where_sources]
line_nums
flair_sublines(x[where_sources][2], which(line_nums[2] %in% lines))
source_strings <- purrr::map2(x[where_sources],
line_nums,
~flair_sublines(.x, which(.y %in% lines)))
which(line_nums[2] %in% lines
)
line_nums[2]
lines
source_strings <- purrr::map2(x[where_sources],
line_nums,
~flair_sublines(.x, which(.y[[1]] %in% lines)))
which(line_nums[[2]] %in% lines)
flair_sublines(x[where_sources][2], which(line_nums[[2]] %in% lines))
source_strings <- purrr::map2(x[where_sources],
line_nums,
~flair_sublines(.x[[1]], which(.y[[1]] %in% lines)))
flair_sublines(x[where_sources][[2]], which(line_nums[[2]] %in% lines))
text <- x[where_sources][[2]]
which_lines <- which(line_nums[[2]] %in% lines)
text <- text %>% str_split("\\n|(<br>)")
text
text[which_lines] <- text[which_lines] %>% flair_all(...)
text[which_lines] <- text[which_lines] %>% flair_all()
flair_sublines <- function(text, which_lines, ...) {
text <- text %>% str_split("\\n|(<br>)") %>% unlist()
text[which_lines] <- text[which_lines] %>% flair_all(...)
text <- str_c(text, collapse = "<br>")
return(text)
}
text <- text %>% str_split("\\n|(<br>)") %>% unlist()
text[which_lines] <- text[which_lines] %>% flair_all()
text <- str_c(text, collapse = "<br>")
text
flair_sublines <- function(text, which_lines, ...) {
text <- text %>% str_split("\\n|(<br>)") %>% unlist()
text[which_lines] <- text[which_lines] %>% flair_all()
text <- str_c(text, collapse = "<br>")
return(text)
}
flair_sublines(x[where_sources][[2]], which(line_nums[[2]] %in% lines))
source_strings <- purrr::map2(x[where_sources],
line_nums,
~flair_sublines(.x[[1]], which(.y[[1]] %in% lines)))
source_strings
line_nums %in% lines
line_nums
lines
to_flair <- map(line_nums, ~.x %in% lines)
to_flair
to_flair <- map(line_nums, ~any(.x %in% lines))
to_flair <- unlist(map(line_nums, ~any(.x %in% lines)))
to_flair
library(flair)
