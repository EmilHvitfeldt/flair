% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flair-package.R, R/flair.R
\docType{package}
\name{flair}
\alias{flair}
\alias{flair_rx}
\alias{flair_quick}
\alias{flair_all}
\alias{flair_all.default}
\alias{flair_all.with_flair}
\alias{flair_args}
\alias{flair_funs}
\alias{flair_input_vals}
\title{flair: A package for adding flair to your displayed source code.}
\usage{
flair_rx(x, pattern, before = NULL, after = NULL, script = NULL, ...)

flair_quick(x, pattern, before = NULL, after = NULL, ...)

flair(x, pattern, ...)

flair_all(x, ...)

\method{flair_all}{default}(x, ...)

\method{flair_all}{with_flair}(x, ...)

flair_args(x, ...)

flair_funs(x, ...)

flair_input_vals(x, ...)
}
\arguments{
\item{x}{A string object}

\item{pattern}{A pattern to match.  By default, this is a fixed pattern; use \code{flair_rx} for regular expressions.}

\item{before}{String giving specific html tags to insert before matched text.}

\item{after}{String giving specific html tags to insert after matched text.}

\item{...}{Formatting style options, passed to \code{\link{txt_style}}}
}
\value{
A string with formatting wrappers.
}
\description{
The flair package provides ...

\code{flair} returns a string with formatting wrappers (currently only html)
}
\section{Flair functions}{


The \code{flair_*} functions add decorative formatting to source code.
}

\section{Decorate functions}{


The \code{decorate} functions execute source code and simultaneously prepare it to have flair added, to display when knitted.
}

\examples{
\dontrun{
code_string <- "foo <- mean(1:10, na.rm = TRUE)"

code_string \%>\% flair("foo")

code_string \%>\% flair_args()

code_string \%>\% flair_funs(color = "red")
}

}
